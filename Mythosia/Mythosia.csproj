<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <LangVersion>11.0</LangVersion>
    <TargetFramework>netstandard2.1</TargetFramework>
    <Nullable>enable</Nullable>
    <Title>Mythosia</Title>
    <RepositoryUrl>https://github.com/AJ-comp/Mythosia</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <PackageTags>AsyncLock, string, numeric, enumerable, delegate, parallel, extension, hex format, helper</PackageTags>
    <Authors>JJW</Authors>
    <PackageProjectUrl>https://github.com/AJ-comp/Mythosia/tree/master/Mythosia</PackageProjectUrl>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <Description>This project supports custom functions for user's clean code that are not directly provided by .NET.

# New functions 
===============================================================
## 1. To numeric array
List&lt;byte&gt; test = new List&lt;byte&gt;() { 10, 16, 15, 30, 45, 65, 90, 32 };

var result = test.ToUShortArray();  // result is 0x100a, 0x1e0f, 0x412d, 0x205a (when little endian)
var result = test.ToUIntArray();  // result is 0x1e0f100a, 0x205a412d (when little endian)
var result = test.ToULongArray(); // result is 0x205a412d1e0f100a (when little endian)
===============================================================

===============================================================
## 2. To binary string
private List&lt;byte&gt; test = new List&lt;byte&gt;() { 10, 16, 15, 30, 45, 65 };

// binary
test.ToBinaryString();  // result is "000010100001000000001111000111100010110101000001"
test.ToBinaryString(BinaryPartitionSize.Bit2) // result is "00 00 10 10 00 01 00 00 00 00 11 11 00 01 11 10 00 10 11 01 01 00 00 01"
test.ToBinaryString(BinaryPartitionSize.HalfByte) // result is "0000 1010 0001 0000 0000 1111 0001 1110 0010 1101 0100 0001"
test.ToBinaryString(BinaryPartitionSize.Byte) // result is "00001010 00010000 00001111 00011110 00101101 01000001"
test.ToBinaryString(BinaryPartitionSize.Byte, "0b") // result is "0b00001010 0b00010000 0b00001111 0b00011110 0b00101101 0b01000001"
===============================================================


# Fixed
===============================================================
ToPrefixedHexString and ToUnPrefixedHexString function is replaced with the ToHexString function but the function will have remained until 1.3.0 ver.
Please use the ToHexString.

// hex
var result = test.ToHexStringL();  // result is  "0a100f1e2d41"
var result = test.ToHexStringL(HexPartitionSize.Byte);  // result is "0a 10 0f 1e 2d 41
var result = test.ToHexStringL(HexPartitionSize.Byte2); // result is "0a10 0f1e 2d41"
var result = test.ToHexStringU(HexPartitionSize.Byte2); // result is "0A10 0F1E 2D41"
===============================================================



# Existing Functions 
using Mythosia;

// Example for string extension
var data = "12345".ToDefaultArray(); // Equal with Encoding.Default.GetBytes("12345");
var data = "12345".ToASCIIArray(); // Equal with Encoding.ASCII.GetBytes("12345");
var data = "=".Repeat(10); // data is "=========="

// Example for numeric (byte, short, int, etc...) extension
var result = 56.IsInRange(0, 100);  // result is true 
var result = 56.IsInRange(0, 30);   // result is false
var data = 56000000.ToSIPrefix();   // data is "56 M"
var data = 56000000.ToSIPrefix(SIPrefixUnit.Kilo);   // data is "56000 k"
var data = 423.42031.HostToNetworkEndian(); // change to big endian

// Example for Enumerable extension
new List&lt;byte&gt; test = new List&lt;byte&gt;(){0xff, 0xab, 0x01, 0x00, 0xee};
test.AddExceptNull(item);  // add item if item is not null

new List&lt;byte&gt; newItems = new List&lt;bye&gt;(){ 0x01, 0x02 };
test.AddRangeParallel(newItems);    // add items as parallel
</Description>
    <Version>1.2.1</Version>
    <UserSecretsId>5132670b-07c2-4079-9555-10308adb224f</UserSecretsId>
    <PackageReadmeFile>README.md</PackageReadmeFile>
  </PropertyGroup>

  <ItemGroup>
    <None Update="Collections\README.md">
      <PackagePath>\</PackagePath>
      <Pack>True</Pack>
    </None>
    <None Update="IO\README.md">
      <PackagePath>\</PackagePath>
      <Pack>True</Pack>
    </None>
    <None Update="README.md">
      <Pack>True</Pack>
      <PackagePath>\</PackagePath>
    </None>
    <None Update="Threading\Synchronization\README.md">
      <PackagePath>\</PackagePath>
      <Pack>True</Pack>
    </None>
  </ItemGroup>

</Project>
