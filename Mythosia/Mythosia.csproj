<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <LangVersion>11.0</LangVersion>
    <TargetFramework>netstandard2.1</TargetFramework>
    <Nullable>enable</Nullable>
    <Title>Mythosia</Title>
    <RepositoryUrl>https://github.com/AJ-comp/Mythosia</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <PackageTags>AsyncLock, hex format, helper, binary, hex string, binary string, string, numeric, enumerable, delegate, parallel, extension</PackageTags>
    <Authors>JJW</Authors>
    <PackageProjectUrl>https://github.com/AJ-comp/Mythosia/tree/master/Mythosia</PackageProjectUrl>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <Description>This project supports custom functions for user's clean code that are not directly provided by .NET.

# New functions 

1. WriteExAsync &amp; ReadExAsync
Asynchronous read and write operations for streams with custom timeout support. Defaulting to the stream's ReadTimeout and WriteTimeout when -2 is passed.

-- Example ---------------------------------------------------------
using NetworkStream stream = new TcpClient("127.0.0.1", 8000).GetStream();

// 1 second timeout
await stream.WriteExAsync(new ReadOnlyMemory&lt;byte&gt;(new byte[] { 1, 2, 3 }), 1000);

byte[] buffer = new byte[3];
// 1 second timeout
await stream.ReadExAsync(buffer.AsMemory(), 1000);
----------------------------------------------------------------------

2. GetEnumFromName
Easily parse an enum value from its string representation.

-- Example ---------------------------------------------------------
enum Color { Red }

var color = "Red".GetEnumFromName&lt;Color&gt;(); // color is Color.Red
----------------------------------------------------------------------

3. AsOrToArray
Efficiently convert an IEnumerable&lt;byte&gt; to a byte array. If the source is already a byte[], the conversion is performed in O(1) time complexity. Otherwise, the conversion is O(n).

-- Example ---------------------------------------------------------
IEnumerable&lt;byte&gt; test1 = new List&lt;byte&gt; { 1, 2, 3, 4, 5 };
IEnumerable&lt;byte&gt; test2 = new byte[5] { 1, 2, 3, 4, 5 };

var bytes1 = test1.AsOrToArray(); // O(n)
var bytes2 = test2.AsOrToArray(); // O(1)
----------------------------------------------------------------------


# Existing Functions 

using Mythosia;

// Example for numeric (byte, short, int, etc...) extension
var result = 56.IsInRange(0, 100);  // result is true 
var result = 56.IsInRange(0, 30);   // result is false
var data = 56000000.ToSIPrefix();   // data is "56 M"
var data = 56000000.ToSIPrefix(SIPrefixUnit.Kilo);   // data is "56000 k"
var data = 423.42031.HostToNetworkEndian(); // change to big endian
-------------------------------------------------------------------------------

// Example for Notation
private List&lt;byte&gt; test = new List&lt;byte&gt;() { 10, 16, 15, 30, 45, 65 };

// binary
test.ToBinaryString();  // result is "000010100001000000001111000111100010110101000001"
test.ToBinaryString(BinaryPartitionSize.Bit2) // result is "00 00 10 10 00 01 00 00 00 00 11 11 00 01 11 10 00 10 11 01 01 00 00 01"
test.ToBinaryString(BinaryPartitionSize.HalfByte) // result is "0000 1010 0001 0000 0000 1111 0001 1110 0010 1101 0100 0001"
test.ToBinaryString(BinaryPartitionSize.Byte) // result is "00001010 00010000 00001111 00011110 00101101 01000001"
test.ToBinaryString(BinaryPartitionSize.Byte, "0b") // result is "0b00001010 0b00010000 0b00001111 0b00011110 0b00101101 0b01000001"

// hex
var result = test.ToHexStringL();  // result is  "0a100f1e2d41"
var result = test.ToHexStringL(HexPartitionSize.Byte);  // result is "0a 10 0f 1e 2d 41
var result = test.ToHexStringL(HexPartitionSize.Byte2); // result is "0a10 0f1e 2d41"

var result = test.ToHexStringU(HexPartitionSize.Byte2);  // result is "0A10 0F1E 2D41"
var result = test.ToHexStringU(HexPartitionSize.Byte2, "0x");  // result is "0x0A10 0x0F1E 0x2D41"
var result = test.ToHexStringU(HexPartitionSize.Byte2, "", "h");  // result is "0A10h 0F1Eh 2D41h"
------------------------------------------------------------------------------

// Example for Enumerable extension
new List&lt;byte&gt; test = new List&lt;byte&gt;(){0xff, 0xab, 0x01, 0x00, 0xee};
test.AddExceptNull(item);  // add item if item is not null

new List&lt;byte&gt; newItems = new List&lt;bye&gt;(){ 0x01, 0x02 };
test.AddRangeParallel(newItems);    // add items as parallel
------------------------------------------------------------------------------
</Description>
    <Version>1.2.2</Version>
    <UserSecretsId>5132670b-07c2-4079-9555-10308adb224f</UserSecretsId>
    <PackageReadmeFile>README.md</PackageReadmeFile>
  </PropertyGroup>

  <ItemGroup>
    <None Update="Collections\README.md">
      <PackagePath>\</PackagePath>
      <Pack>True</Pack>
    </None>
    <None Update="IO\README.md">
      <PackagePath>\</PackagePath>
      <Pack>True</Pack>
    </None>
    <None Update="README.md">
      <Pack>True</Pack>
      <PackagePath>\</PackagePath>
    </None>
    <None Update="Threading\Synchronization\README.md">
      <PackagePath>\</PackagePath>
      <Pack>True</Pack>
    </None>
  </ItemGroup>

</Project>
