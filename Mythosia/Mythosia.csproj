<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <LangVersion>11.0</LangVersion>
    <TargetFramework>netstandard2.1</TargetFramework>
    <Nullable>enable</Nullable>
    <Title>Mythosia</Title>
    <RepositoryUrl>https://github.com/AJ-comp/Mythosia</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <PackageTags>AsyncLock, string, numeric, enumerable, delegate, parallel, extension, helper</PackageTags>
    <Authors>JJW</Authors>
    <PackageProjectUrl>https://github.com/AJ-comp/Mythosia/tree/master/Mythosia</PackageProjectUrl>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <Description>This project supports custom functions for user's clean code that are not directly provided by .NET.

# Fixed
example assume there is a variable that has -32768.
in the previous, the hex format of the value on little-endian system is as below 
    "0080"
in big endian is as below
    "8000"

this is confusing so from this version hex format of the value is always looks as below (don't care endian)
    "8000"


# Other functions 
using Mythosia;

// Example for string extension
var data = "12345".ToDefaultArray(); // Equal with Encoding.Default.GetBytes("12345");
var data = "12345".ToASCIIArray(); // Equal with Encoding.ASCII.GetBytes("12345");
var data = "=".Repeat(10); // data is "=========="

// Example for numeric (byte, short, int, etc...) extension
var result = 56.IsInRange(0, 100);  // result is true 
var result = 56.IsInRange(0, 30);   // result is false
var data = 56000000.ToSIPrefix();   // data is "56 M"
var data = 56000000.ToSIPrefix(SIPrefixUnit.Kilo);   // data is "56000 k"
var data = 423.42031.HostToNetworkEndian(); // change to big endian

// Example for Enumerable extension
new List&lt;byte&gt; test = new List&lt;byte&gt;(){0xff, 0xab, 0x01, 0x00, 0xee};
var result = test.ToUnPrefixedHexString();   // result is "ff ab 01 00 ee"
var result = test.ToPrefixedHexString();   // result is "0xffab0100ee"
test.AddExceptNull(item);  // add item if item is not null

new List&lt;byte&gt; newItems = new List&lt;bye&gt;(){ 0x01, 0x02 };
test.AddRangeParallel(newItems);    // add items as parallel
</Description>
    <Version>1.2.0</Version>
    <UserSecretsId>5132670b-07c2-4079-9555-10308adb224f</UserSecretsId>
    <PackageReadmeFile>README.md</PackageReadmeFile>
  </PropertyGroup>

  <ItemGroup>
    <None Update="README.md">
      <Pack>True</Pack>
      <PackagePath>\</PackagePath>
    </None>
    <None Update="Threading\Synchronization\README.md">
      <PackagePath>\</PackagePath>
      <Pack>True</Pack>
    </None>
  </ItemGroup>

</Project>
