using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Mythosia.AI.Models.Enums;

namespace Mythosia.AI.Models.Functions
{
    /// <summary>
    /// Represents a function that can be called by AI
    /// </summary>
    public class FunctionDefinition
    {
        public string Name { get; set; }
        public string Description { get; set; }
        public FunctionParameters Parameters { get; set; }
        public Func<Dictionary<string, object>, Task<string>> Handler { get; set; }

        public FunctionDefinition()
        {
            Parameters = new FunctionParameters();
        }
    }

    /// <summary>
    /// Represents function parameters schema
    /// </summary>
    public class FunctionParameters
    {
        public string Type { get; set; } = "object";
        public Dictionary<string, ParameterProperty> Properties { get; set; }
        public List<string> Required { get; set; }

        public FunctionParameters()
        {
            Properties = new Dictionary<string, ParameterProperty>();
            Required = new List<string>();
        }
    }

    /// <summary>
    /// Represents a single parameter property
    /// </summary>
    public class ParameterProperty
    {
        public string Type { get; set; }
        public string Description { get; set; }
        public List<string> Enum { get; set; }
        public object Default { get; set; }
    }

    /// <summary>
    /// ID source for function calls
    /// </summary>
    public enum IdSource
    {
        Library,    // Generated by our library
        OpenAI,     // Generated by OpenAI
        Claude,     // Generated by Claude
        Gemini,     // Generated by Gemini
        DeepSeek,   // Generated by DeepSeek
        Perplexity  // Generated by Perplexity
    }

    /// <summary>
    /// Represents a function call from AI
    /// </summary>
    public class FunctionCall
    {
        /// <summary>
        /// The original ID from the source
        /// </summary>
        public string Id { get; set; }

        /// <summary>
        /// Where this ID came from
        /// </summary>
        public IdSource Source { get; set; }

        /// <summary>
        /// Function name
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// Function arguments
        /// </summary>
        public Dictionary<string, object> Arguments { get; set; }

        public FunctionCall()
        {
            Arguments = new Dictionary<string, object>();
        }
    }

    /// <summary>
    /// Function call mode
    /// </summary>
    public enum FunctionCallMode
    {
        None,   // Don't call functions
        Auto,   // AI decides when to call
    }

    /// <summary>
    /// Message metadata keys for standardization
    /// </summary>
    public static class MessageMetadataKeys
    {
        public const string MessageType = "message_type";  // "function_call" or "function_result"
        public const string FunctionId = "function_id";    // The original function ID
        public const string FunctionSource = "function_source";  // ID source (OpenAI, Claude, etc)
        public const string FunctionName = "function_name";
        public const string FunctionArguments = "function_arguments";

        // For preserving original message structure
        public const string OriginalContent = "original_content";
    }
}