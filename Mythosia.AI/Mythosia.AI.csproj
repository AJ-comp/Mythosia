<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.1</TargetFramework>
    <Nullable>enable</Nullable>
  </PropertyGroup>


	<PropertyGroup>
		<VersionPrefix>2.0.1</VersionPrefix>

		<Company>Mythosia</Company>
		<PackageTags>AI; ChatGpt; Claude; DeepSeek; Sonar; Gemini; Multi modal;</PackageTags>
		<Authors>JJW</Authors>
		<Description>The `Mythosia.AI` library provides a unified interface for various AI models with **multimodal support**, including **OpenAI GPT-4o**, **Anthropic Claude 3**, **Google Gemini**, **DeepSeek**, and **Perplexity Sonar**.

## 🚀 What's New in v2.0

- **Multimodal Support**: Send images along with text to compatible AI models
- **Stateless Mode**: Process requests independently without maintaining conversation history
- **Fluent Message Builder**: Easily construct complex multimodal messages
- **Enhanced Extensions**: Convenient helper methods for common scenarios
- **Web Search Integration**: Real-time web search with citations (Perplexity Sonar)
- **Audio Support**: Text-to-Speech and Speech-to-Text (OpenAI)

## Supported Models

- **OpenAI**: GPT-4o (latest, 2024-08-06), GPT-4o-mini, GPT-3.5 Turbo
- **Anthropic**: Claude 3.5 Sonnet, Claude 3.5 Haiku, Claude 3 Opus
- **Google**: Gemini 1.5 Flash, Gemini 1.5 Pro, Gemini Pro Vision  
- **DeepSeek**: DeepSeek Chat, DeepSeek Reasoner
- **Perplexity**: Sonar, Sonar Pro, Sonar Reasoning

## Key Features

- ✅ Synchronous and streaming completions
- ✅ Image analysis (OpenAI GPT-4o, Claude 3, Gemini)
- ✅ Image generation (OpenAI DALL-E)
- ✅ Audio transcription and generation (OpenAI)
- ✅ Web search with citations (Perplexity)
- ✅ Token counting and management
- ✅ Conversation history management
- ✅ Model switching on the fly
- ✅ Comprehensive error handling

## Quick Examples

```csharp
// Basic setup (don't forget the using statements!)
using Mythosia.AI;
using Mythosia.AI.Extensions; // Required for BeginMessage() and other extensions

var service = new ChatGptService(apiKey, httpClient);

// Text completion
var response = await service.GetCompletionAsync("What is AI?");

// Image analysis (with GPT-4o)
service.ActivateChat.ChangeModel(AIModel.Gpt4oLatest);
var analysis = await service.GetCompletionWithImageAsync(
    "Describe this image", "photo.jpg");

// Fluent API for complex messages
await service.BeginMessage()
    .AddText("Compare these images")
    .AddImage("before.jpg")
    .AddImage("after.jpg")
    .SendAsync();

// Stateless mode for independent requests
service.StatelessMode = true;
await service.GetCompletionAsync("Translate: Hello"); // No history

// One-off queries without affecting conversation
var quickAnswer = await service.AskOnceAsync("What time is it?");
```

Full documentation and examples: https://github.com/AJ-comp/Mythosia/tree/master/Mythosia.AI</Description>
		<PackageProjectUrl>https://github.com/AJ-comp/Mythosia/tree/master/Mythosia.AI</PackageProjectUrl>
		<PackageReadmeFile>README.md</PackageReadmeFile>
		<Version>2.0.1</Version>
	</PropertyGroup>


	<ItemGroup>
		<PackageReference Include="Azure.AI.OpenAI" Version="2.1.0" />
		<PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
		<PackageReference Include="TiktokenSharp" Version="1.1.6" />
	</ItemGroup>


	<ItemGroup>
	  <ProjectReference Include="..\Mythosia\Mythosia.csproj" />
	</ItemGroup>

	<ItemGroup>
	  <None Update="README.md">
	    <Pack>True</Pack>
	    <PackagePath>\</PackagePath>
	  </None>
	</ItemGroup>

</Project>
