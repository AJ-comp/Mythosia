<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.1</TargetFramework>
    <Nullable>enable</Nullable>
  </PropertyGroup>


	<PropertyGroup>
		<VersionPrefix>1.7.1</VersionPrefix>
		<Company>Mythosia</Company>
		<PackageTags>AI, ChatGpt, Claude, DeepSeek, Sonar, Gemini</PackageTags>
		<Authors>JJW</Authors>
		<Description>
The `Mythosia.AI` library provides an abstraction for various AI models, including support for **OpenAI GPT-4**, **Anthropic Claude**, **DeepSeek**, **Sonar**, **Gemini**, and more.  
This library allows easy interaction with AI services, enabling both synchronous completion and streaming capabilities for GPT-3.5, GPT-4, Claude, DeepSeek, Sonar, Gemini, etc.

### Supported Models

- **OpenAI**: GPT-4, GPT-3.5 (Turbo), GPT-4o variants
- **Anthropic Claude**: Claude 3.x (Claude3_5Sonnet, Claude3Opus, etc.)
- **DeepSeek**: various chat/reasoner models
- **Sonar**: sonar, sonar-pro, sonar-reasoning
- **Gemini**: gemini-1.5-flash (and possible future expansions)

## How to Use

### Allocation
```csharp
using Mythosia.AI;
using System.Net.Http;

var httpClient = new HttpClient();

// Example usage for each supported service:
var aiService = new ChatGptService("your_openai_api_key", httpClient);
var aiService = new ClaudeService("your_anthropic_api_key", httpClient);
var aiService = new DeepSeekService("your_deepseek_api_key", httpClient);
var aiService = new SonarService("your_sonar_api_key", httpClient);
var aiService = new GeminiService("your_gemini_api_key", httpClient);
```

### completion
```csharp
string response = await aiService.GetCompletionAsync("What is AI?");
```

### Token Counting
```csharp
// Entire conversation token count
uint totalTokens = await aiService.GetInputTokenCountAsync();

// Single-prompt token count
uint promptTokens = await aiService.GetInputTokenCountAsync("One-off prompt to analyze");
```

### Model Switching Example
```csharp
// Add to existing ChatBlock usage
aiService.ActivateChat.ChangeModel(AIModel.Gpt4oLatest);
aiService.ActivateChat.ChangeModel("o1-2024-12-17"); // change with string
```

### Streaming Responses
```csharp
await aiService.StreamCompletionAsync("Explain quantum computing", content =&gt; {
Console.WriteLine(content);
});
```


		</Description>
		<PackageProjectUrl>https://github.com/AJ-comp/Mythosia/tree/master/Mythosia.AI</PackageProjectUrl>
		<PackageReadmeFile>README.md</PackageReadmeFile>
	</PropertyGroup>


	<ItemGroup>
		<PackageReference Include="Azure.AI.OpenAI" Version="2.1.0" />
		<PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
		<PackageReference Include="TiktokenSharp" Version="1.1.6" />
	</ItemGroup>


	<ItemGroup>
	  <ProjectReference Include="..\Mythosia\Mythosia.csproj" />
	</ItemGroup>

	<ItemGroup>
	  <None Update="README.md">
	    <Pack>True</Pack>
	    <PackagePath>\</PackagePath>
	  </None>
	</ItemGroup>

</Project>
